---
- name: Get VxLAN Data
  command: vxrdctl vxlans -j
  register: vxrd_vxlans_output
  when: vxrd[ansible_hostname] is defined

- name: Process VxLAN Data
  set_fact:
    configured_vxlans: "{{vxrd_vxlans_output.stdout | from_json}}"
  when: vxrd[ansible_hostname] is defined

# This ensures that all the expected VNIs are configured.
# Does not check if extra VNIs are configured
- name: Validate VNIs
  assert:
    that:
      - ('{{item}}') in configured_vxlans.keys()
  with_items: "{{vxrd.vnis}}"
  when: vxrd[ansible_hostname] is defined

# This will look at each VNI configured on the box and validate
# that the service node is configured as expected
- name: Validate Service Node
  assert:
    that:
      - configured_vxlans[{{item}}|string].svcnodeip == vxrd.service_node
  with_items: "{{configured_vxlans.keys()}}"

- name: Validate Head End Replication Endpoints
  assert:
    that:
      - {{item[0]}} in configured_vxlans[{{item[1]}}]|string].hrep_addrs
    with_nested:
      - {{vxrd[ansible_hostname]}}
      - {{configured_vxlans.keys()}}
#cumulus@leaf01:~$ sudo vxrdctl vxlans -j
#{"24": {"dev_name": "vni24", "svcnodeip": "10.255.255.10", "hrep_addrs": ["10.10.10.3", "10.10.10.2"], "localip": "10.10.10.1"}, "13": {"dev_name": "vni13", "svcnodeip": "10.255.255.10", "hrep_addrs": ["10.10.10.3", "10.10.10.2"], "localip": "10.10.10.1"}}

  #     - clag[ansible_hostname].priority == configured_clag["status"]["ourPriority"]
  #     - clag[ansible_hostname].role == configured_clag["status"]["ourRole"]
  #     - clag[ansible_hostname].system_mac == configured_clag["status"]["sysMac"]
  #     - clag[ansible_hostname].anycast == configured_clag["status"]["vxlanAnycast"]
  #     - clag[ansible_hostname].backup_ip == configured_clag["status"]["backupIp"]
  #     - clag[ansible_hostname].peer_ip == configured_clag["status"]["peerIp"]
  # when: clag[ansible_hostname] is defined
